{"data":{"allOrgContent":{"edges":[{"node":{"meta":{"title":"Basics Usages","tags":["tags"]},"html":"<div class=\"section\"><p>This documentation explains how to use orga to parse org-mode content into AST. Find the complete definition of AST <a href=\"/ast\">here</a>.</p><div class=\"section\"><h2>Install</h2><pre><code class=\"language-sh\"> npm install orga</code></pre></div><div class=\"section\"><h2>Examples</h2><div class=\"section\"><h3>Getting Started</h3><p>Create a file <code>test.js</code>.</p><pre><code class=\"language-javascript\">   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`orga`</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"* TODO Hello World\"</span>\n   <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></code></pre><p>The <code>ast</code> would look like this:</p><pre><code class=\"language-javascript\"> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n   children<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'section'</span><span class=\"token punctuation\">,</span>\n\tchildren<span class=\"token punctuation\">:</span>\n         <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'headline'</span><span class=\"token punctuation\">,</span>\n             children<span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n                  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span>\n                  parent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Circular<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             level<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n             keyword<span class=\"token punctuation\">:</span> <span class=\"token string\">'TODO'</span><span class=\"token punctuation\">,</span>\n             priority<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span>\n             tags<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             parent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Circular<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\tlevel<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tparent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Circular<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   settings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div><div class=\"section\"><h3>Add Options</h3><p>You can customize the parser by sending in options.</p><pre><code class=\"language-javascript\">   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`orga`</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"* NEXT Hello World\"</span>\n   <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> todos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'TODO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NEXT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DONE'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div><div class=\"section\"><h3>User the <code>Parser</code></h3><pre><code class=\"language-javascript\">   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Parser <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`orga`</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"* NEXT Hello World\"</span>\n   <span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the Parser accept options too</span>\n   <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></code></pre></div></div><div class=\"section\"><h2>Options</h2><table><tr><td>key</td><td>type</td><td>function</td><td>Default</td></tr><div></div><tr><td>todos</td><td>Array of Strings</td><td>TODO keywords</td><td>['TODO', 'DONE']</td></tr></table></div></div>"}},{"node":{"meta":{"title":"With Unified","tags":["tags"]},"html":"<div class=\"section\"><p><a href=\"https://unifiedjs.github.io\">Unified</a> is an awesome ecosystem for text processing. Here is how to plug orga into it.</p><div class=\"section\"><h2>Setup</h2><p>Install dependencies.</p><pre><code class=\"language-sh\"> npm install unified unified-stream orga-unified orga-rehype rehype-stringify</code></pre></div><div class=\"section\"><h2>Usage</h2><p>Create an <code>index.js</code> file like this.</p><pre><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> unified <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unified'</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unified-stream'</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">const</span> parse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orga-unified'</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">const</span> mutate <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orga-rehype'</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rehype-stringify'</span><span class=\"token punctuation\">)</span>\n\n <span class=\"token keyword\">const</span> processor <span class=\"token operator\">=</span> <span class=\"token function\">unified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>parse<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>mutate<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\n process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>processor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span></code></pre><p>Run command:</p><pre><code class=\"language-sh\"> node index.js < README.org > readme.html</code></pre></div></div>"}}]}},"pageContext":{}}