#+TODO: DRAFT | PUBLISHED
#+ORGA_PUBLISH_KEYWORD: PUBLISHED

* PUBLISHED Basics Usages
  CLOSED: [2018-12-11 Tue 19:39]
  :PROPERTIES:
  :DESCRIPTION: The basic usage of package orga. Explains how to parse org-mode string into AST.
  :END:

This documentation explains how to use orga to parse org-mode content into AST.
Find the complete definition of AST [[/ast][here]].

** Install

 #+BEGIN_SRC sh
 npm install orga
 #+END_SRC

** Examples

*** Getting Started

 Create a file ~test.js~.

 #+BEGIN_SRC javascript
   const { parse } = require(`orga`)
   const content = "* TODO Hello World"
   const ast = parse(content)
 #+END_SRC

 The ~ast~ would look like this:

 #+BEGIN_SRC javascript
 { type: 'root',
   children:
    [ { type: 'section',
	children:
         [ { type: 'headline',
             children:
              [ { type: 'text',
                  children: [ [length]: 0 ],
                  value: 'Hello World',
                  parent: [Circular] },
		[length]: 1 ],
             level: 1,
             keyword: 'TODO',
             priority: undefined,
             tags: [ [length]: 0 ],
             parent: [Circular] },
           [length]: 1 ],
	level: 1,
	parent: [Circular] },
      [length]: 1 ],
   settings: {} }
 #+END_SRC

*** Add Options
 You can customize the parser by sending in options.

 #+BEGIN_SRC javascript
   const { parse } = require(`orga`)
   const content = "* NEXT Hello World"
   const ast = parse(content, { todos: ['TODO', 'NEXT', 'DONE'] })
 #+END_SRC


*** User the ~Parser~

 #+BEGIN_SRC javascript
   const { Parser } = require(`orga`)
   const content = "* NEXT Hello World"
   const parser = new Parser() // the Parser accept options too
   const ast = parser.parse(content)
 #+END_SRC

** Options

 | key   | type             | function      | Default          |
 |-------+------------------+---------------+------------------|
 | todos | Array of Strings | TODO keywords | ['TODO', 'DONE'] |

* PUBLISHED With Unified
  CLOSED: [2018-12-11 Tue 19:40]
  :PROPERTIES:
  :DESCRIPTION: How to use orga with unified, to do great things.
  :END:

[[https://unifiedjs.github.io][Unified]] is an awesome ecosystem for text processing. Here is how to plug orga into it.

** Setup

 Install dependencies.

 #+BEGIN_SRC sh
 npm install unified unified-stream orga-unified orga-rehype rehype-stringify
 #+END_SRC

** Usage

 Create an =index.js= file like this.

 #+BEGIN_SRC javascript
 const unified = require('unified')
 const stream = require('unified-stream')
 const parse = require('orga-unified')
 const mutate = require('orga-rehype')
 const html = require('rehype-stringify')

 const processor = unified()
       .use(parse)
       .use(mutate)
       .use(html)

 process.stdin.pipe(stream(processor)).pipe(process.stdout)
 #+END_SRC

 Run command:

 #+BEGIN_SRC sh
 node index.js < README.org > readme.html
 #+END_SRC
